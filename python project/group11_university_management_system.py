# -*- coding: utf-8 -*-
"""Group11_University Management System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ScJh8QF7r7NDWeXvFUuT1jUU5t7tevX
"""

class UniversityManagementSystem:
    def __init__(self):
        self.students = {}
        self.courses = {}
        self.enrollments = []

    def add_student(self, student_id, name):
        if student_id not in self.students:
            self.students[student_id] = name
            print(f"Student {name} with ID {student_id} added successfully.")
        else:
            print(f"Student with ID {student_id} already exists.")

    def add_course(self, course_id, name):
        if course_id not in self.courses:
            self.courses[course_id] = name
            print(f"Course {name} with ID {course_id} added successfully.")
        else:
            print(f"Course with ID {course_id} already exists.")

    def enroll_student(self, student_id, course_id):
        if student_id in self.students and course_id in self.courses:
            enrollment = (student_id, course_id)
            if enrollment not in self.enrollments:
                self.enrollments.append(enrollment)
                print(f"Student with ID {student_id} enrolled in course with ID {course_id}.")
            else:
                print("Student is already enrolled in this course.")
        else:
            print("Student or course not found.")

    def delete_student(self, student_id):
        if student_id in self.students:
            del self.students[student_id]
            # Remove enrollments associated with the deleted student
            self.enrollments = [(s, c) for s, c in self.enrollments if s != student_id]
            print(f"Student with ID {student_id} has been deleted.")
        else:
            print(f"Student with ID {student_id} not found.")

    def delete_course(self, course_id):
        if course_id in self.courses:
            del self.courses[course_id]
            # Remove enrollments associated with the deleted course
            self.enrollments = [(s, c) for s, c in self.enrollments if c != course_id]
            print(f"Course with ID {course_id} has been deleted.")
        else:
            print(f"Course with ID {course_id} not found.")

    def edit_student(self, student_id, name):
        if student_id in self.students:
            self.students[student_id] = name
            print(f"Student with ID {student_id} has been updated.")
        else:
            print(f"Student with ID {student_id} not found.")

    def edit_course(self, course_id, name):
        if course_id in self.courses:
            self.courses[course_id] = name
            print(f"Course with ID {course_id} has been updated.")
        else:
            print(f"Course with ID {course_id} not found.")

    def display_students(self):
        print("List of Students:")
        for student_id, name in self.students.items():
            print(f"ID: {student_id}, Name: {name}")

    def display_courses(self):
        print("List of Courses:")
        for course_id, name in self.courses.items():
            print(f"ID: {course_id}, Name: {name}")

    def display_enrollments(self):
        print("Enrollments:")
        for student_id, course_id in self.enrollments:
            student_name = self.students.get(student_id, "Unknown Student")
            course_name = self.courses.get(course_id, "Unknown Course")
            print(f"Student: {student_name}, Course: {course_name}")

def main():
    ums = UniversityManagementSystem()

    while True:
        print("\nUniversity Management System")
        print("1. Add Student")
        print("2. Add Course")
        print("3. Enroll Student in Course")
        print("4. Delete Student")
        print("5. Delete Course")
        print("6. Edit Student")
        print("7. Edit Course")
        print("8. Display Students")
        print("9. Display Courses")
        print("10.Display Enrollments")
        print("0. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            student_id = input("Enter Student ID: ")
            name = input("Enter Student Name: ")
            ums.add_student(student_id, name)
        elif choice == '2':
            course_id = input("Enter Course ID: ")
            name = input("Enter Course Name: ")
            ums.add_course(course_id, name)
        elif choice == '3':
            student_id = input("Enter Student ID: ")
            course_id = input("Enter Course ID: ")
            ums.enroll_student(student_id, course_id)
        elif choice == '4':
            student_id = input("Enter Student ID to delete: ")
            ums.delete_student(student_id)
        elif choice == '5':
            course_id = input("Enter Course ID to delete: ")
            ums.delete_course(course_id)
        elif choice == '6':
            student_id = input("Enter Student ID to edit: ")
            name = input("Enter updated Student Name: ")
            ums.edit_student(student_id, name)
        elif choice == '7':
            course_id = input("Enter Course ID to edit: ")
            name = input("Enter updated Course Name: ")
            ums.edit_course(course_id, name)
        elif choice == '8':
            ums.display_students()
        elif choice == '9':
            ums.display_courses()
        elif choice == '10':
            ums.display_enrollments()
        elif choice == '0':
            print("Exiting University Management System.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()